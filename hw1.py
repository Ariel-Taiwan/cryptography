# -*- coding: utf-8 -*-
"""408410007-hw1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10e3IioZrlinMRwltgHSBnqGqglTG4C73
"""

!pip install cryptography
!pip install pycryptodome

from google.colab import drive
drive.mount('/content/drive')

with open('/content/drive/MyDrive/100mb-file/100MB.bin', 'rb') as f:
    data = f.read()

print(type(data))

#以下為AES-CBC mode加密

from Crypto.Cipher import AES
from Crypto.Util.Padding import pad

iv = '01pv928nv2i5ss68'
key = '63f09k56nv2b10cf'

def CBCEncrypt(key, iv, data):
    ## new 一個 AES CBC cipher
    cipher = AES.new(key.encode('utf-8'), AES.MODE_CBC, iv.encode('utf-8'))
    
    return (cipher.encrypt(pad(data, AES.block_size)))


result = CBCEncrypt(key, iv, data)
print(result)

from Crypto.Util.Padding import unpad
import codecs

def CBCDecrypt(key, iv, data):
    print(type(data))
    #b64 = json.loads(data)
    #print(type(b64))
    #nonce = b64decode(b64['nonce'])
    #ciphertext = b64decode(b64['ciphertext'])
    #print(type(ciphertext))
    #data = bytes.fromhex(data) ## 或是要用 bytes.fromhex(data) 也行
    cipher = AES.new(key.encode('utf-8'), AES.MODE_CBC, iv.encode('utf-8'))
    return unpad(cipher.decrypt(data), AES.block_size)
    
plaintext = CBCDecrypt(key, iv, result)
print(plaintext)

if data == plaintext:
        print("equeal is success")
else:
        print("not equal")

#以下為AES-CTR mode (counter mode)加密

from Crypto.Cipher import AES
from Crypto.Util import Counter

iv = '01pv928nv2i5ss68'
key = '63f09k56nv2b10cf'

def CTREncrypt(key, iv, data):
    ctr = Counter.new(128)
    cipher = AES.new(key.encode('utf-8'), AES.MODE_CTR, counter=ctr)
    
    return (cipher.encrypt(pad(data, AES.block_size)))

result = CTREncrypt(key, iv, data)
print(result)

def CTRDecrypt(key, iv, data):
    print(type(data))
    ctr = Counter.new(128)
    cipher = AES.new(key.encode('utf-8'), AES.MODE_CTR, counter=ctr)
    return unpad(cipher.decrypt(data), AES.block_size)
    
plaintext = CTRDecrypt(key, iv, result)
print(plaintext)

if data == plaintext:
        print("equeal is success")
else:
        print("not equal")

#以下為ChaCha20加密

import json
from base64 import b64encode
from Crypto.Cipher import ChaCha20
from Crypto.Random import get_random_bytes

print(type(data))
key = get_random_bytes(32)
cipher = ChaCha20.new(key=key)
ciphertext = cipher.encrypt(data)

nonce = b64encode(cipher.nonce).decode('utf-8')
ct = b64encode(ciphertext).decode('utf-8')
result = json.dumps({'nonce':nonce, 'ciphertext':ct})
print(result)

from base64 import b64decode
try:
    print(type(result))
    b64 = json.loads(result)
    print(type(b64))
    nonce = b64decode(b64['nonce'])
    ciphertext = b64decode(b64['ciphertext'])
    print(type(ciphertext))
    cipher = ChaCha20.new(key=key, nonce=nonce)
    plaintext = cipher.decrypt(ciphertext)
    print("The message was " + str(plaintext, 'utf-8'))
except (ValueError, KeyError):
    print("Incorrect decryption")

if data == plaintext:
        print("equeal is success")
else:
        print("not equal")

#此次作業實作3種加密法：
#(1) 使用AES-CBC mode加密
#(2) 使用AES-CTR mode (counter mode)加密
#(3) 使用ChaCha20加密